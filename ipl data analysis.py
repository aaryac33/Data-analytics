# -*- coding: utf-8 -*-
"""Copy of DS_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bohiKV32CEWJgBSfoBizGXB6N19GiuUp

# Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.offline as pyo
import plotly.graph_objs as go
import plotly.figure_factory as ff
import plotly.subplots as subplots
import cufflinks as cf
# %matplotlib inline
from plotly.offline import iplot
import plotly.graph_objs as go

import plotly.io as pio
pio.templates

"""# Getting Data"""

!gdown --id 1x3gfhI0kX-tckRoQRENF_jTCFLgILCuM

!unzip '/content/archive.zip' -d '/content/data'

df_balls = pd.read_csv("/content/data/IPL Ball-by-Ball 2008-2020.csv")
print(df_balls.shape)
#df_balls.head()

df_matches = pd.read_csv("/content/data/IPL Matches 2008-2020.csv")
print(df_matches.shape)
#df_matches.head()

data = pd.merge(left=df_matches, right=df_balls, on='id', how='right')
print(data.shape)
data.head()

"""# Formatting

**Adding another column for year**
"""

data['date'] = pd.to_datetime(data['date'])
data['year'] = pd.DatetimeIndex(data['date']).year
data.head()

"""**Making overs run from 1 to 20 instead of 0 to 19**"""

print(np.sort(data['over'].unique()))
data['over'] = data['over']+1
print(np.sort(data['over'].unique()))

"""**Correcting a duplicate entry in teams' names**"""

data['team1'].unique()

data.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)
df_balls.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)
df_matches.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)

"""**Correcting spelling of Bengalore to Bengaluru for one entry of city**"""

data.replace({'Bangalore':'Bengaluru'},regex=True,inplace=True)
df_balls.replace({'Bangalore':'Bengaluru'},regex=True,inplace=True)
df_matches.replace({'Bangalore':'Bengaluru'},regex=True,inplace=True)

data['team1'].unique()

"""# Runs scored over the years"""

runs_year = data.groupby(by='year').sum()['total_runs']
runs_year = pd.DataFrame(runs_year)
runs_year = runs_year.reset_index(drop=False)
runs_year.head()

import random
def random_colors(number_of_colors):
    color = ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])
                 for i in range(number_of_colors)]
    return color

total_runs = go.Bar(
                    x=runs_year['year'],
                    y=runs_year['total_runs'],
                    #mode='lines',
                    marker = dict(color = random_colors(len(runs_year['year'].value_counts().index)),line=dict(color='#000000', width=1)),

                    name='runs'
                    )
layout = go.Layout(autosize=False,
                      width=800,
                      height=400,
                  title='Runs scored per year',
                  xaxis = dict(title='Year'),
                  yaxis = dict(title='Runs'))

fig = go.Figure(data=[total_runs], layout=layout)

pyo.iplot(fig)

"""# Toss Decisions"""

df_matches.head()

toss_data = pd.DataFrame(df_matches['toss_decision'].value_counts()).reset_index()
display(toss_data.head())
toss_data2 = pd.DataFrame()
toss_data2['toss_influence'] = df_matches.apply(lambda x : 'Yes' if x['toss_winner']==x['winner'] else 'No', axis=1)
toss_data2 = toss_data2.value_counts().reset_index()
toss_data2.head()

toss_plot = go.Bar(
                    y=toss_data['index'],
                    x=toss_data['toss_decision'],
                   orientation='h',
                   marker_color=px.colors.qualitative.Dark24[0:2],
                   #color_discrete_sequence=["red"]
                    #name='runs'
                    )
layout = go.Layout(   autosize=False,
                      width=300,
                      height=300,
                   #colorscale = px.colors.sequential.Viridis,
                      #color='toss_decision',
                      title='Toss Decisions',
                      yaxis = dict(title='Decision'),
                      xaxis = dict(title='Counts'),
                      margin=go.layout.Margin(
                                                    l=50,
                                                    r=50,
                                                    b=100,
                                                    t=100,
                                                    pad = 4
                                                )
                       )
fig = go.Figure(data=[toss_plot], layout=layout)

pyo.iplot(fig)

toss_plot2 = go.Bar(
                    y=toss_data2['toss_influence'],
                    x=toss_data2[0],
                   orientation='h',
                   marker_color=px.colors.qualitative.Plotly[0:2],
                   #color_discrete_sequence=["red"]
                    #name='runs'
                    )
layout = go.Layout(   autosize=False,
                      width=350,
                      height=350,
                   #colorscale = px.colors.sequential.Viridis,
                      #color='toss_decision',
                      title='Does Wining toss helps teams to win?',
                      xaxis = dict(title='Counts'),
                      yaxis = dict(title='Is influencial'),
                      margin=go.layout.Margin(
                                                    l=50,
                                                    r=50,
                                                    b=100,
                                                    t=100,
                                                    pad = 4
                                                )
                       )
fig = go.Figure(data=[toss_plot2], layout=layout)

pyo.iplot(fig)

"""# Runs and Wickets per over"""

runs_and_wickets = data.groupby(by='over').sum()[['total_runs','is_wicket']].reset_index()
runs_and_wickets['total_runs'] = (runs_and_wickets['total_runs']-runs_and_wickets['total_runs'].min())/(runs_and_wickets['total_runs'].max()-runs_and_wickets['total_runs'].min())
runs_and_wickets['is_wicket'] = (runs_and_wickets['is_wicket']-runs_and_wickets['is_wicket'].min())/(runs_and_wickets['is_wicket'].max()-runs_and_wickets['is_wicket'].min())
runs_and_wickets.head()

runs_wckts_plot = [
        go.Bar(
            name="Runs_per_over",
            x=runs_and_wickets["over"],
            y=runs_and_wickets["total_runs"],
            offsetgroup=0,
        ),
        go.Bar(
            name="Wickets_per_over",
            x=runs_and_wickets["over"],
            y=runs_and_wickets["is_wicket"],
            offsetgroup=1,
        )
        ]
layout = go.Layout(   autosize=False,
                      width=1000,
                      height=600,
                      title='Runs and Wickets per over',
                      xaxis = dict(title='Overs'),
                      yaxis = dict(title='Normalizaed Values'),
                      margin=go.layout.Margin(
                                                    l=50,
                                                    r=50,
                                                    b=100,
                                                    t=100,
                                                    pad = 4
                                                )
                       )
fig = go.Figure(data=runs_wckts_plot, layout=layout)

pyo.iplot(fig)

"""# Runs Per Match"""

Runs_per_match = df_balls.groupby(by='id').sum()['total_runs'].reset_index()
Runs_per_match.head()

Runs_per_match_plot = go.Histogram(
                    x=Runs_per_match['total_runs'],                   
                    name='Runs'
                    )
layout = go.Layout(   autosize=False,
                      width=1000,
                      height=600,
                      title='Runs Per Match',
                      xaxis = dict(title='Runs'),
                      yaxis = dict(title='Frequency'),template = 'presentation',
                      # margin=go.layout.Margin(
                      #                               l=50,
                      #                               r=50,
                      #                               b=100,
                      #                               t=100,
                      #                               pad = 4
                      #                           )
                       )
fig = go.Figure(data=[Runs_per_match_plot], layout=layout)

pyo.iplot(fig)

"""# Most wins"""

df_matches.head()

most_wins_plot = [go.Bar(
    x = df_matches['winner'].value_counts().index,
    y = df_matches['winner'].value_counts().values,
    marker = dict(color = random_colors(len(df_matches['winner'].value_counts().index)),line=dict(color='#000000', width=1))
)]

layout = go.Layout(
    autosize=False,
                      width=1000,
                      height=600,
                      title='Most Wins by a team',
                      xaxis = dict(title='Teams'),
                      yaxis = dict(title='Wins'),template = 'presentation',
                                         margin=go.layout.Margin(
                                                    l=100,
                                                    r=50,
                                                    b=200,
                                                    t=100,
                                                    pad = 4
                                                )
)

fig = go.Figure(data=most_wins_plot,layout = layout)
iplot(fig)

"""# Most Inflential Player"""

most_mom_plot = [go.Bar(
    x = df_matches['player_of_match'].value_counts()[:20].index,
    y = df_matches['player_of_match'].value_counts()[:20].values,
    marker = dict(color = random_colors(20),line=dict(color='#000000', width=1.5))
)]


layout = go.Layout(
    autosize=False,
                      width=1000,
                      height=600,
                      title='Most Man of the Matches',
                      xaxis = dict(title='Players'),
                      yaxis = dict(title='MoM Awards'),template = 'presentation',
                                         margin=go.layout.Margin(
                                                    l=100,
                                                    r=50,
                                                    b=200,
                                                    t=100,
                                                    pad = 4
                                                )
)

fig = go.Figure(data=most_mom_plot, layout=layout)
iplot(fig)

"""# Cities as Top Host"""

matches_citites= df_matches.groupby('city').apply(lambda x:x['city'].count()).reset_index(name='Total Matches')
top_order=matches_citites.sort_values(by='Total Matches',ascending=False)
top=top_order[:10]

most_cities = [go.Pie(labels = top_cities.city.values, values =top_cities["Match Counts"].values,
               marker = dict(colors = random_colors(10),line=dict(color='#000000', width=1.5))) ]

layout = go.Layout(
    autosize=False,
                      width=1000,
                      height=600,
                      title='Most Cities to host matches',
            template = 'presentation',
                                         margin=go.layout.Margin(
                                                    l=100,
                                                    r=50,
                                                    b=200,
                                                    t=100,
                                                    pad = 4
                                                )
)

fig = go.Figure(data=most_cities,layout = layout)
iplot(fig)

